class Song

  attr_accessor :name, :album, :id

  def initialize(name:, album:, id: nil)
    @id = id
    @name = name
    @album = album
  end

  def self.create_table
    sql =  <<-SQL
      CREATE TABLE IF NOT EXISTS songs (
        id INTEGER PRIMARY KEY,
        name TEXT,
        album TEXT
      )
      SQL
    DB[:conn].execute(sql)
    
  end

  #INSERT RECORD
  def save
    sql = <<-SQL
      INSERT INTO songs (name, album)
      VALUES (?, ?)
    SQL
  
    DB[:conn].execute(sql, self.name, self.album)
    set_id
    puts self

  end

  #SHOWING ALL RECORDS
  def self.show_all
    sql = <<-SQL
    SELECT * FROM songs
    SQL
    DB[:conn].execute(sql)
  end

  #UPDATING A RECORD

  def update_record
    sql = <<-SQL
       UPDATE  songs SET name = ?, album = ? WHERE id = ?
    SQL
    DB[:conn].execute(sql, self.name,self.album,self.id)
  end

  #DELETING A RECORD

  def delete_record

    sql = <<-SQL
        DELETE  FROM songs WHERE id = ?
    SQL

    DB[:conn].execute(sql,self.id)
  end
  #CONVERTING TABLE RECORD TO RUBY OBJECT
  #This will be our return value

  def songs_to_ruby_objects(row)
    #We can replace the code below
    
=begin
      songs_data = Student.new(
        name: row[1],
        age: row[2],
        id: row[0]
      )
      songs_data
    end
=end
    #As
    #When we have it this way
    #Instead of using the Student.new
    #Each time creating a new class
    #instance, we can have it stored in memory by using self
    self.new(name: row[1],age: row[2], id: row[0])
  end
     

    #METHOD TO RETRIEVE OUR ID SINCE WE SET IT TO NIL
    #The method will make it private for it to be used only in our class

    private
    def set_id
      sql = "SELECT last_insert_rowid() FROM songs"
      
     retrieved_id = DB[:conn].execute(sql)
     #When we use SELECT we have to index the position of the item we are selecting
     self.id = retrieved_id[0][0]
     #So each time we insert a record we should call teh method set_id as a last return statement

    end
end   